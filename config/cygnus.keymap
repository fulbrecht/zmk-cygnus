/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 22 23 30 31 32 33 34 35 40 41 39 21>;
            flavor = "tap-preferred";
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-preferred";
        };

        layer_tap_quick: layer_tap_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_QUICK";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QEXCL";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpar_morph: lpar_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_MORPH";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_morph: rpar_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_MORPH";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        homerow_gui_left: homerow_gui_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_GUI_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        homerow_gui_right: homerow_gui_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_GUI_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BAS";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | ENT |   | SPC | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q            &kp W            &kp E             &kp R              &kp T        &kp Y        &kp U               &kp I             &kp O             &kp P                     &kp BSPC
&kp LEFT_ALT  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D      &hml LEFT_SHIFT F  &kp G        &kp H        &hmr RIGHT_SHIFT J  &hmr RCTRL K      &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp SQT
&kp LSHFT     &kp Z            &kp X            &kp C             &kp V              &kp B        &kp N        &kp M               &kp COMMA         &kp DOT           &kp FSLH                  &kp RIGHT_SHIFT
                                                &mt LCTRL ESCAPE  &lt 2 TAB          &lt 5 RET    &lt 5 SPACE  &mo 3               &mt RCTRL ESCAPE
            >;
        };

        game_layer {
            display-name = "GAM";
            bindings = <
&kp TAB       &kp Q  &kp W  &kp E             &kp R      &kp T        &kp Y        &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_ALT  &kp A  &kp S  &kp D             &kp F      &kp G        &kp H        &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT     &kp Z  &kp X  &kp C             &kp V      &kp B        &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                            &mt LCTRL ESCAPE  &lt 5 TAB  &kp SPACE    &lt 2 ENTER  &mo 3  &kp RCTRL
            >;
        };

        symbol_layer {
            display-name = "SYM";
            bindings = <
&kp BACKSPACE  &kp DELETE  &kp LG(LS(S))  &kp LC(LS(S))  &kp RA(RC(DELETE))  &trans         &kp EQUAL  &kp MINUS  &kp PLUS  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans
&trans         &kp EXCL    &kp AT         &kp POUND      &kp DOLLAR          &kp PERCENT    &kp CARET  &kp AMPS   &kp STAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
&trans         &kp EQUAL   &kp MINUS      &kp PLUS       &kp LBRC            &kp LBKT       &kp LBKT   &kp RBKT   &kp SEMI  &kp COLON             &kp BSLH               &trans
                                          &trans         &trans              &kp SPACE      &trans     &trans     &trans
            >;
        };

        nav_layer {
            display-name = "NAV";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans    &kp PG_UP      &kp LC(LEFT)  &kp UP        &kp LC(RIGHT)  &kp LC(BSPC)  &trans
&trans  &trans  &trans     &trans     &trans     &trans    &kp PAGE_DOWN  &kp LEFT      &kp DOWN      &kp RIGHT      &kp RCTRL     &trans
&trans  &trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans    &trans         &kp HOME      &kp LC(DOWN)  &kp END        &trans        &trans
                           &trans     &trans     &trans    &kp ENTER      &trans        &trans
            >;
        };

        nav_select_layer {
            display-name = "SEL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp PG_UP      &kp LC(LS(LEFT))  &kp LS(UP)        &kp LC(LS(RIGHT))  &kp LC(BSPC)  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &kp LS(LEFT)      &kp LS(DOWN)      &kp LS(RIGHT)      &kp RCTRL     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans         &kp HOME          &kp LC(LS(DOWN))  &kp END            &trans        &trans
                        &trans  &trans  &trans    &kp ENTER      &trans            &trans
            >;
        };

        num_layer {
            display-name = "NUM";
            bindings = <
&kp BACKSPACE     &kp KP_MULTIPLY   &kp N9  &kp N8   &kp N7  &kp KP_SLASH       &kp KP_DIVIDE    &kp N7  &kp N8   &kp N9  &kp KP_MULTIPLY   &kp BACKSPACE
&lt 6 ENTER       &kp N0            &kp N6  &kp N5   &kp N4  &kp KP_PLUS        &kp KP_PLUS      &kp N4  &kp N5   &kp N6  &kp N0            &lt 6 ENTER
&mt DOLLAR EQUAL  &mt COMMA PERIOD  &kp N3  &kp N2   &kp N1  &kp KP_SUBTRACT    &kp KP_SUBTRACT  &kp N1  &kp N2   &kp N3  &mt COMMA PERIOD  &mt DOLLAR EQUAL
                                            &kp DOT  &kp N0  &trans             &trans           &kp N0  &kp DOT
            >;
        };

        f_layer {
            display-name = "FUN";
            bindings = <
&trans  &trans  &kp F9  &kp F8  &kp F7  &kp F12    &kp F12  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &trans  &kp F6  &kp F5  &kp F4  &kp F11    &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &trans  &kp F3  &kp F2  &kp F1  &kp F10    &kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans
                        &trans  &trans  &trans     &trans   &trans  &trans
            >;
        };

        adjust_layer {
            display-name = "ADJ";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bt BT_CLR_ALL  &bt BT_CLR  &none         &none         &none         &tog 1          &none   &none     &none           &none           &none  &none
&none           &none       &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_NXT    &out OUT_TOG    &none   &kp CLCK  &kp KP_NUMLOCK  &kp SCROLLLOCK  &none  &none
&none           &none       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none           &none   &none     &none           &none           &none  &none
                                          &trans        &none         &trans          &trans  &none     &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <2 3>;
            then-layer = <7>;
        };

        game_adj {
            if-layers = <3 5>;
            then-layer = <7>;
        };
    };
};
